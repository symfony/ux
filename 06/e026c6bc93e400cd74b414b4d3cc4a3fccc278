---------------------------------------------------------------------------

by smnandre at 2024-09-18T16:43:48Z

Do we still need to call the Runtime then ?  Would this not be sufficient ?

```
 return htmlspecialchars($string, \ENT_QUOTES | \ENT_SUBSTITUTE, $charset);
 ```

---------------------------------------------------------------------------

by Kocal at 2024-09-18T21:08:14Z

> Do we still need to call the Runtime then ? Would this not be sufficient ?
>
> ```
>  return htmlspecialchars($string, \ENT_QUOTES | \ENT_SUBSTITUTE, $charset);
> ```

If we assume UTF-8 is used everywhere, yes, but `|escape('html')` does more than that :/

---------------------------------------------------------------------------

by smnandre at 2024-09-21T01:52:57Z

This bundle is the most used / downloaded. So we cannot release a version that will break tests (and maybe code) during a minor...

so we need to find a way out here... what about thinking a new object ? less "stimulus" and more "attributes"  ?

---------------------------------------------------------------------------

by smnandre at 2024-09-21T19:41:53Z

Sadly, it's difficult, as this class is directly used by other components / bundle.. and it's neither final or internal :|

---------------------------------------------------------------------------

by Kocal at 2024-09-22T12:34:34Z

It's a BC for tests/assertions yes, but I don't really see how and where it can impact end users.

However, we can't stay ad vitam aeternam with `html_attr` escaping for HTML attribute values, as we all see it is not performant at all.

Since `StimulusAttributes` is not final nor internal, maybe... we can configure the escaping format through a new method?

---------------------------------------------------------------------------

by kbond at 2024-09-22T13:20:23Z

New bundle config? Deprecate not setting it to the new, desired value?

---------------------------------------------------------------------------

by smnandre at 2024-09-22T15:27:45Z

> New bundle config ?

We cannot here, this class may be instanciated directly in many projects, as it is not a service.

> Deprecate not setting it to the new, desired value?

This is a good idea. Probably we can add an argument either in the render / toString methods, or maybe more in the constructor..

.. and deprecate no passing it (stating in 3.x it will use the new mode)

?

---------------------------------------------------------------------------

by smnandre at 2024-09-22T15:42:16Z

Regarding performances, i'm very _very_ happy you found this bottleneck and have a clean method to improve things.

But as always, we cannot "force it" down, and it's been written everywhere Symfony  UX would follow Symfony BC promise.

To be clear, i'm _**not**_ saying we cannot use these optimisations in the ux components
* ux map is still experimental, and this is a very legit case of accepted change
* we did not made any promise/engagement on the attributes generated by live component, and it could 100% be considered internal .. this also work for chartsjs, etc (but should we release a typed bundle version just for this ? i'm not entirely sure here..)

I'm concerned about two things here:
* the StimulusAttributes class in itself, that can be used elsewhere / tested / etc ... this would be a major BC break, as simple unit test cases would break
* the StimulusBundle twig functions (`stimulus_xxx`), that could be configured by the stimulus bundle but i'm not sure this is worth it

---------------------------------------------------------------------------

by kbond at 2024-09-22T15:56:19Z

> This is a good idea. Probably we can add an argument either in the render / toString methods, or maybe more in the constructor..

> .. and deprecate no passing it (stating in 3.x it will use the new mode)

Constructor then, yes.

---------------------------------------------------------------------------

by Kocal at 2024-09-22T19:51:14Z

I'm reverting to `html_attr` escaping strategy by default, then I will add whatever needed to re-use `html` for escaping html attribute values (without BC breaks)

---------------------------------------------------------------------------

by javiereguiluz at 2024-09-23T16:01:19Z

Folks, I'm a bit lost about the mentioned BC break. Can you please share an example of a BC-break caused by changing this? Thanks!

---------------------------------------------------------------------------

by stof at 2024-09-23T16:15:12Z

there is no BC break for users of the library. But there is a different escaping applied, which can make their *tests* fail if they assert the output of the rendering of `StimulusAttribute`.

Note however that by this argument, any bugfix is also forbidden.

---------------------------------------------------------------------------

by Kocal at 2024-09-24T08:11:58Z

I've updated the PR and introduced a new config `stimulus.use_optimized_attributes_rendering` (default to `null`, which allows me to trigger a deprecation if not explicitly specified):
<img width="969" alt="image" src="https://github.com/user-attachments/assets/f7297fe3-a259-4103-aae6-f2613d2dd883">
_Note: I'll gladly take any comments for my deprecation messages... ðŸ˜…_

This configuration is injected to the `StimulusHelper` constructor, then injected to the `StimulusAttributes` constructor.

I've rollbacked tests added in my first commit as it was considered as breaking changes. Instead, I've configured `stimulus.use_optimized_attributes_rendering`/`$useOptimizedRendering` to `false` in order to get rid of deprecation notices (which make tests fails and CI red). I also adapted actual tests to test the _new optimized_ rendering, this way we can clearly see the difference between the actual and new rendering behaviour.

With all those changes, I took a new Blackfire profile on my page with a `Map` and 1000 `Marker`/`InfoWindow`, and did [a new comparaison](https://blackfire.io/profiles/compare/f71cdd8c-c741-47ec-a598-2318a4821b3e/graph):
<img width="1031" alt="image" src="https://github.com/user-attachments/assets/43a90046-387a-42fa-a5bd-f22fbcb5acf4">

---------------------------------------------------------------------------

by javiereguiluz at 2024-09-24T08:25:23Z

@Kocal impressive performance improvement ðŸ¤¯ thanks a lot ðŸ™‡

I still think this is not a true BC break and we shouldn't complicate things with the new config option.

---------------------------------------------------------------------------

by Kocal at 2024-09-24T08:33:48Z

I agree with all of you, I don't consider it a breaking change either.
The behavior **won't change** in the browser, users won't be (badly) impacted by this modification.

Let's revert the 2 last commit then, just in case. We will squash the PR at merging.

---------------------------------------------------------------------------

by Kocal at 2024-09-24T08:40:25Z

The PR is now back at its original state, there is no `stimulus.use_optimized_attributes_rendering` config anymore.
